shiny::runApp('Git/SmartFloorE')
shiny::runApp('Git/SmartFloorE')
runApp('Git/SmartFloorE')
shiny::runApp()
library(plotly)
library(jsonlite)
library(mongolite)
library(dplyr)
runApp()
install.packages(mongolite)
install.packages('mongolite')
install.packages("mongolite")
shiny::runApp()
runApp()
library(mongolite)
connectionA <- mongo(collection = "footstep_mocap", db = "smartfloor", url = "mongodb://localhost",
verbose = FALSE, options = ssl_options())
collection <- connectionA$find()
runApp()
runApp()
data.frame(distinct(collection$session))
runApp()
data.frame(distinct(collectionA$session))
findAllSessions <- function() {
data.frame(distinct(collectionA$session))
}
findSessionById <- function(id) {
data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
}
findPlayers <- function(id) {
session <- findSessionById(id)
data.frame(distinct(session$user))
}
runApp()
runApp()
runApp()
runApp()
runApp()
?sliderInput
runApp()
runApp()
runApp()
?plt_ly
?plot_ly
runApp()
save.image("D:/werk/klad/temp environment Smartfloor.RData")
View(positions)
View(collection)
runApp()
findPositions(01)
findPositions('01')
findPlayers('01')
runApp()
?rbind
View(positions)
findPositions('04')
findPositions('04')
findPositions <- function(id) {
session <- findSessionById(id)
data.frame(session$time, session$position, session$user)
}
findPositions('04')
findPositions <- function(id) {
session <- findSessionById(id)
data.frame(session$position, session$user)
}
findSessionTimeAndPosition <- function(id) {
session <- findSessionById(id)
data.frame(sessiont$time, session$position, session$user)
}
findSessionTimeAndPosition('01')
findSessionTimeAndPosition('01')
findSessionTimeAndPosition('01')
findSessionTimeAndPosition <- function(id) {
session <- findSessionById(id)
data.frame(session$time, session$position, session$user)
}
findSessionTimeAndPosition('01')
runApp()
View(findSessionTimeAndPosition)
?function
??function
?function()
View(collection)
findSessionByTime <- function(timeId) {
data.frame(connectionA$find(paste0("{ \"time\": \"", timeId, "\"}")))
}
findStepAndPositionByTime <- function(id, timeId) {
session <- findSessionById(id)
stepTime <- timeId
data.frame(session$time, session$position, session$user)
}
findSessionByTime('2017-06-01 03:21:52')
findSessionByTime(2017-06-01 03:21:52)
findSessionByTime(2017-06-01 03:21:52)
findSessionByTime("2017-06-01 03:21:52")
findSessionByTime("2017-06-01 03:21:52")
findSessionByTime('2017-06-01 01:21:50.207Z')
findSessionByTime('2017-06-01 03:21:50.207Z')
findSessionByTime <- function(timeId, sessionId) {
data.frame(connectionA$find(paste0("{ \"time\": { \"$date\":  \"", timeId, "\"}}")))
}
findSessionByTime('2017-06-01 01:21:50.207Z')
findSessionByTime <- function(timeId) {
data.frame(connectionA$find(paste0("{ \"time\": { \"$date\":  \"", timeId, "\"}}")))
}
findSessionByTime <- function(timeId) {
data.frame(connectionA$find(paste0("{ \"time\": { \"$date\":  \"", timeId, "\"}}")))
}
findSessionByTime('2017-06-01 01:21:50.207Z')
findSessionByTime("2017-06-01T01:21:54.082Z")
findSessionByTime("2017-06-01T01:21:54.082Z", '01')
findSessionByTime <- function(timeId, id) {
data.frame(connectionA$find(paste0("{ \"time\": { \"$date\":  \"", timeId, "\"}}","{ \"session.$id\": \"", id, "\"}")))
}
findSessionByTime("2017-06-01T01:21:54.082Z", '01')
findSessionByTime("2017-06-01T01:21:54.082Z", 01)
findSessionByTime("2017-06-01T01:21:54.082Z", "01")
findSessionByTime <- function(timeId, id) {
data.frame(connectionA$find(paste0("{ \"time\": { \"$date\":  \"", timeId, "\"}, \"session.$id\": \"", id, "\"}")))
}
findSessionByTime("2017-06-01T01:21:54.082Z", "01")
findStepbySessionAndTime <- function(timeId, id) {
data.frame(connectionA$find(paste0("{ \"time\": { \"$date\":  \"", timeId, "\"}, \"session.$id\": \"", id, "\"}")))
}
View(findStepbySessionAndTime)
findTimesForFilter <- function(id) {
data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}, sort = '{\"time\": 1}'")))
}
findTimesForFilter('01')
findTimesForFilter('01')
findTimesForFilter('01')
findTimesForFilter <- function(id) {
data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
}
findTimesForFilter('01')
findTimesForFilter <- function(id) {
data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}, sort = {\"date\": 1}")))
}
findTimesForFilter('01')
data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}, sort = {\"$date\": 1}")))
findTimesForFilter <- function(id) {
data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}, sort = {\"$date\": 1}")))
}
findTimesForFilter('01')
findTimesForFilter <- function(id) {
data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}, sort = {\"$time\": 1}")))
}
findTimesForFilter('01')
findTimesForFilter <- function(id) {
data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}, sort = {\"time\": -1}")))
}
findTimesForFilter('01')
findTimesForFilter <- function(id) {
data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}, sort = '{\"time\": 1}'")))
}
findTimesForFilter('01')
findTimesForFilter <- function(id) {
data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}, sort = '{\"sessions$time\": 1}'")))
}
findTimesForFilter('01')
findTimesForFilter <- function(id) {
data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}, sort = '{\"session$time\": 1}'")))
}
findTimesForFilter('01')
findTimesForFilter <- function(id) {
data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}, sort = '{\"sessions$date\": 1}'")))
}
findTimesForFilter('01')
findTimesForFilter <- function(id) {
data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}, sort = '{\"sessions.$date\": 1}'")))
}
findTimesForFilter('01')
data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}, sort = '{\"time\": 1}'")))
findTimesForFilter <- function(id) {
data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}, sort = '{\"time\": 1}'")))
}
findTimesForFilter('01')
?sort
findTimesForFilter <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDf$time)
return(timesDF)
}
findTimesForFilter('01')
findTimesForFilter <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
return(timesDF)
}
findTimesForFilter('01')
findTimesForFilter('01')
findTimesForFilter <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
return(timesDF[1])
}
findTimesForFilter('01')
findTimesForFilterLow <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
return(timesDF[1])
}
?tail
findTimesForFilterHigh <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
return(tail(timesDF, n = 1))
}
findTimesForFilterHigh('01')
runApp()
lowestTimeForFilter <- findTimesForFilterLow(id)
highestTimeForFilter <- indTimesForFilterHigh(id)
lowestTimeForFilter <- findTimesForFilterLow(id)
highestTimeForFilter <- indTimesForFilterHigh(id)
runApp()
runApp()
data <- reactive({
# Distance between positions in meters, distance between two positions equals 10cm.
distance_between_positions = 0.1
id <- input$sessions
timeId <- input$playSession
session <- findSessionById(id)
players <- findPlayers(id)
positions <- findPositions(id)
positionsByTime <- findStepbySessionAndTime(timeId, id)
lowestTimeForFilter <- findTimesForFilterLow(id)
highestTimeForFilter <- indTimesForFilterHigh(id)
print(positions)
distance_per_player <- c()
average_speed_per_player <- c()
num_footsteps_per_player <- c()
player_name = "Unknown"
for (index in 1:nrow(players)) {
# Vector of all positions within a session for a particular player.
positions_for_player <-
filter(positions, X.id == players[index, 2])
# Distances between positions are calculated by adding up the x/y position differences.
distances <- positions_for_player %>%
mutate(difference =
abs(positions_for_player$x - lag(positions_for_player$x, default = 0)) +
abs(positions_for_player$y - lag(positions_for_player$y, default = 0))) %>%
.$difference
# The total distance is calculated by multiplying the distance between tags with the sum of the distances between each step.
distance_in_meters = distance_between_positions * sum(distances)
# Total session time for a player.
session_time = (session$time[nrow(session)] - session$time[1]) / 1000
# Average speed in kilometers per hour for a particular player *as.Double() NOT SURE*.
speed_in_kph = (distance_in_meters / as.double(session_time)) * 3.6
# Concatenating calculated values to the vectors, which are declared above.
distance_per_player <- c(distance_per_player, distance_in_meters)
average_speed_per_player <- c(average_speed_per_player, speed_in_kph)
num_footsteps_per_player <- c(num_footsteps_per_player, nrow(positions_for_player))
}
# A data frame containing all relevant data per player(i.e. average speed, distance).
player_data <- data.frame(players$X.id, num_footsteps_per_player, distance_per_player, average_speed_per_player)
# Creation of a matrix for a floor, this is used to show a heatmap(or any sort of graph which utilizes the z-axis).
# floor <- matrix(0, max(positions$x), max(positions$y))
#
# # For each step taken on a floor, the z value will be increased for a particular position to create a matrix.
# for(index in 1:nrow(positions)) {
#   floor[positions[index, 1], positions[index, 2]] <- floor[floor(positions[index, 1]), round(positions[index, 2])] + 1
# }
player_data
})
runApp()
id <- input$sessions
timeId <- input$playSession
session <- findSessionById(id)
players <- findPlayers(id)
positions <- findPositions(id)
positionsByTime <- findStepbySessionAndTime(timeId, id)
lowestTimeForFilter <- findTimesForFilterLow(id)
highestTimeForFilter <- indTimesForFilterHigh(id)
print(positions)
distance_per_player <- c()
average_speed_per_player <- c()
num_footsteps_per_player <- c()
player_name = "Unknown"
lowestTimeForFilter <- findTimesForFilterLow('01')
highestTimeForFilter <- indTimesForFilterHigh('01')
highestTimeForFilter <- findTimesForFilterHigh('01')
runApp()
findTimesForFilterHigh <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
timesDF <- as.Date(timesDF)
return(tail(timesDF, n = 1))
}
findTimesForFilterHigh('01')
?chron
??chron
findTimesForFilterHigh <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
timesDF <- as.character.Date(timesDF)
return(tail(timesDF, n = 1))
}
findTimesForFilterHigh('01')
findTimesForFilterLow <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
timesDF <- as.character.Date(timesDF)
return(timesDF[1])
}
findTimesForFilterHigh <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
timesDF <- as.character.Date(timesDF)
return(tail(timesDF, n = 1))
}
runApp()
runApp()
runApp()
runApp()
?gsub
findTimesForFilterLow <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
timesDF <- gsub("2017-06-01 ","", timesDF)
return(timesDF[1])
}
findTimesForFilterLow('01')
findTimesForFilterLow <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
timesDF <- substr(timesDF, 11, nchar(timesDF))
return(timesDF[1])
}
findTimesForFilterHigh <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
timesDF <- substr(timesDF, 11, nchar(timesDF))
return(tail(timesDF, n = 1))
}
findTimesForFilterLow('01')
?substr
findTimesForFilterLow <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
timesDF <- substr(timesDF, nchar(timesDF) -7, nchar(timesDF))
return(timesDF[1])
}
findTimesForFilterLow('01')
findTimesForFilterLow <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
timesDF <- substr(timesDF, nchar(timesDF) -10, nchar(timesDF))
return(timesDF[1])
}
findTimesForFilterLow('01')
findTimesForFilterLow <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
timesDF <- substr(timesDF, nchar(timesDF) 10, nchar(timesDF))
return(timesDF[1])
}
findTimesForFilterLow <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
timesDF <- substr(timesDF, nchar(timesDF) -2, nchar(timesDF))
return(timesDF[1])
}
findTimesForFilterLow('01')
findTimesForFilterLow <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
timesDF <- substr(timesDF,-2, nchar(timesDF))
return(timesDF[1])
}
findTimesForFilterLow('01')
findTimesForFilterLow <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
timesDF <- substr(timesDF,-2, 14)
return(timesDF[1])
}
findTimesForFilterLow('01')
findTimesForFilterLow <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
timesDF <- substr(timesDF,-2, 16)
return(timesDF[1])
}
findTimesForFilterLow('01')
findTimesForFilterLow <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
timesDF <- substr(timesDF,-2, 19)
return(timesDF[1])
}
findTimesForFilterLow('01')
findTimesForFilterLow <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
timesDF <- substr(timesDF, 15, 19)
return(timesDF[1])
}
findTimesForFilterLow('01')
?gsub
findTimesForFilterLow <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
timesDF <- substr(timesDF, 15, 19)
timesDF <- gsub(":", "", timesDF)
return(timesDF[1])
}
findTimesForFilterLow <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
timesDF <- substr(timesDF, 15, 19)
timesDF <- gsub(":", "", timesDF)
return(timesDF[1])
}
findTimesForFilterLow('01')
findTimesForFilterHigh <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
timesDF <- substr(timesDF, 15, 19)
timesDF <- gsub(":", "", timesDF)
return(tail(timesDF, n = 1))
}
findTimesForFilterHigh('01')
findTimesForFilterLow('01')
runApp()
lowestTimeForFilter <- findTimesForFilterLow(id)
highestTimeForFilter <- findTimesForFilterHigh(id)
highestTimeForFilter <- findTimesForFilterHigh('01')
lowestTimeForFilter <- findTimesForFilterHigh('01')
runApp()
findTimesForFilterLow <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
timesDF <- substr(timesDF, 15, 19)
timesDF <- gsub(":", "", timesDF)
timesDF <- as.numeric(timesDF)
return(timesDF[1])
}
findTimesForFilterHigh <- function(id) {
timesDF <- data.frame(connectionA$find(paste0("{ \"session.$id\": \"", id, "\"}")))
timesDF <- sort(timesDF$time)
timesDF <- substr(timesDF, 15, 19)
timesDF <- gsub(":", "", timesDF)
timesDF <- as.numeric(timesDF)
return(tail(timesDF, n = 1))
}
lowestTimeForFilter <- findTimesForFilterHigh('01')
highestTimeForFilter <- findTimesForFilterHigh('01')
runApp()
positionsByTime <- findStepbySessionAndTime('2017-06-01T01:21:48.415Z', 01')
positionsByTime <- findStepbySessionAndTime('2017-06-01T01:21:48.415Z', '01')
runApp()
save.image("D:/werk/klad/temp environment Smartfloor.RData")
runApp()
